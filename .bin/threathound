#!/usr/bin/python3

import os
import json
import smtplib
import requests
import threading
import tkinter as tk
from tkinter import filedialog, scrolledtext
import platform
import pandas as pd
import scapy.all as scapy
from sklearn.ensemble import IsolationForest
from dotenv import load_dotenv
from trackpath import track_changes

load_dotenv()

class ThreatHoundApp:
    
    def __init__(self, root):
        self.root = root
        self.root.title("ThreatHound - Cybersecurity Analyzer")
        self.running = True
        self.setup_gui()
        self.start_monitoring()

    def setup_gui(self):
        tk.Label(self.root, text="Enter Log File Path:").pack()
        self.log_entry = tk.Entry(self.root, width=50)
        self.log_entry.pack()
        self.log_entry.insert(0, "auth.log")
        tk.Button(self.root, text="Browse...", command=self.browse_file).pack()
        tk.Label(self.root, text="Enter Number of Packets to Capture:").pack()
        self.packet_entry = tk.Entry(self.root, width=10)
        self.packet_entry.pack()
        self.packet_entry.insert(0, "50")
        tk.Button(self.root, text="Start Analysis", command=self.run_analysis).pack()
        
        self.output_text = scrolledtext.ScrolledText(self.root, width=70, height=20)
        self.output_text.pack()

    def browse_file(self):
        file_path = filedialog.askopenfilename(
            title="Select Log File",
            filetypes=[("Log Files", "*.log"), ("All Files", "*.*")]
        )
        if file_path:
            self.log_entry.delete(0, tk.END)
            self.log_entry.insert(0, file_path)

    def run_analysis(self):
        try:
            self.output_text.delete(1.0, tk.END)
            self.update_output("[üîç] Reading authentication logs...")
            logs = self.read_auth_logs()
            
            self.update_output("[‚ö°] Extracting IP addresses...")
            ip_addresses = self.extract_ip_addresses(logs)
            
            self.update_output("[üïµÔ∏è] Sniffing network traffic...")
            packets = self.sniff_packets()
            
            self.update_output("[üî¨] Detecting anomalies...")
            anomalies = self.detect_anomalies(packets + [(ip, None) for ip in ip_addresses])
            
            if anomalies:
                self.handle_anomalies(anomalies)
            else:
                self.update_output("[‚úÖ] No anomalies detected.\n")
                
        except Exception as e:
            self.update_output(f"[‚ùå] Error during analysis: {str(e)}\n")

    def update_output(self, message):
        self.output_text.insert(tk.END, message + "\n")
        self.output_text.see(tk.END)

    def read_auth_logs(self, log_path=None):
        path = log_path or self.log_entry.get()
        if not os.path.exists(path):
            raise FileNotFoundError(f"Log file not found: {path}")
            
        logs = []
        with open(path, "r") as file:
            for line in file:
                if "Failed password" in line or "Accepted password" in line:
                    logs.append(line.strip())
        return logs

    def extract_ip_addresses(self, logs):
        ip_list = []
        for log in logs:
            parts = log.split()
            for part in parts:
                if part.count('.') == 3 and part not in ip_list:
                    ip_list.append(part)
        return ip_list

    def sniff_packets(self):
        try:
            packet_count = int(self.packet_entry.get())
            if packet_count <= 0:
                raise ValueError("Packet count must be positive")
                
            packets = scapy.sniff(count=packet_count, store=False)
            return [(pkt[scapy.IP].src, pkt[scapy.IP].dst) for pkt in packets if scapy.IP in pkt]
            
        except ValueError as e:
            self.update_output(f"[‚ö†Ô∏è] Invalid packet count: {str(e)}")
            return []

    def detect_anomalies(self, network_data):
        if not network_data:
            return []

        df = pd.DataFrame(network_data, columns=["source_ip", "destination_ip"])
        df["encoded_src"] = pd.factorize(df["source_ip"])[0]
        df["encoded_dst"] = pd.factorize(df["destination_ip"])[0]

        model = IsolationForest(contamination=0.1, random_state=42)
        df["anomaly"] = model.fit_predict(df[["encoded_src", "encoded_dst"]])
        
        anomalies = df[df["anomaly"] == -1]
        if not anomalies.empty:
            anomalies.to_csv("anomalies.csv", index=False)
            with open("anomalies.json", "w") as f:
                json.dump(anomalies.to_dict(), f, indent=4)
                
        return anomalies.values.tolist()

    def handle_anomalies(self, anomalies):
        self.update_output("[üö®] Suspicious activity detected!")
        for anomaly in anomalies:
            src_ip = anomaly[0]
            self.update_output(f"Suspicious connection: {src_ip} -> {anomaly[1]}")
            
            if self.check_blacklist(src_ip):
                self.update_output(f"[‚ö†Ô∏è] {src_ip} is a known malicious IP!")
                self.block_ip(src_ip)
                self.send_email_alert(f"ALERT: Malicious IP detected: {src_ip}")

    def check_blacklist(self, ip):
        try:
            response = requests.get(
                f"https://www.abuseipdb.com/check/{ip}",
                headers={"User-Agent": "ThreatHound/1.0"},
                timeout=10
            )
            return response.status_code == 200
        except requests.RequestException:
            return False

    def block_ip(self, ip):
        system_platform = platform.system()
        try:
            if system_platform == "Linux":
                os.system(f"sudo iptables -A INPUT -s {ip} -j DROP")
            elif system_platform == "Windows":
                os.system(f'netsh advfirewall firewall add rule name="Block {ip}" dir=in action=block remoteip={ip}')
            else:
                raise OSError(f"Unsupported platform: {system_platform}")
            self.update_output(f"[üõ°Ô∏è] Successfully blocked {ip}")
        except Exception as e:
            self.update_output(f"[‚ùå] Failed to block IP: {str(e)}")

    def send_email_alert(self, message):
        try:
            server = smtplib.SMTP(os.getenv("SMTP_SERVER"), int(os.getenv("SMTP_PORT")))
            server.starttls()
            server.login(os.getenv("EMAIL_USER"), os.getenv("EMAIL_PASS"))
            server.sendmail(os.getenv("EMAIL_FROM"), os.getenv("EMAIL_TO"), message)
            server.quit()
            self.update_output("[üìß] Security alert sent via email")
        except Exception as e:
            self.update_output(f"[‚ùå] Failed to send email: {str(e)}")

    def start_monitoring(self):
        self.monitor_thread = threading.Thread(target=self.monitor_auth_log, daemon=True)
        self.monitor_thread.start()

    def monitor_auth_log(self):
        while self.running:
            try:
                change = track_changes(self.log_entry.get())
                if change:
                    self.update_output(f"[üëÄ] Detected {change['type']} at {change['path']}")
                    logs = self.read_auth_logs()
                    ip_addresses = self.extract_ip_addresses(logs)
                    self.update_output(f"[üîé] New IPs detected: {', '.join(ip_addresses)}")
            except Exception as e:
                self.update_output(f"[‚ö†Ô∏è] Monitoring error: {str(e)}")
            finally:
                self.root.after(1000, self.monitor_auth_log)

    def on_close(self):
        self.running = False
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = ThreatHoundApp(root)
    root.protocol("WM_DELETE_WINDOW", app.on_close)
    root.mainloop()
